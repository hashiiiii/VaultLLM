---
description: ワークスペース固有の設定ファイル
globs: *
alwaysApply: true
---
# ワークスペースセットアップファイル

このファイルは、このワークスペースにおけるあなたとAIアシスタントのセットアップファイルです。
最初の会話でインタラクティブにカスタマイズを行い、あなたの具体的なニーズに合わせた内容をこのファイルに差分として追加します。

# 重要な注意事項
- このファイルの設定は `.cursorrules / .cursorrules_JA` の内容と競合しないように設計してください。
- インタラクティブセットアッププロセスは 10 回のやり取りで完了します。

# インタラクティブセットアッププロセス - 共通質問項目

初回起動時、AIアシスタントは以下の項目についてあなたに質問します:

1. このワークスペースの目的: どのようなプロジェクトに取り組んでいるのか、または取り組もうとしているのか
=== ここから ===
機密性の高いデータ（ソースコード、Confluence、Slack等を含む）を安全に取り扱うための、プライベートなLLM環境をAWS上に構築する。ローカルLLM（Ollama検討、性能・速度重視）、Open WebUI、Dockerの利用を想定。最優先事項は機密性の確保と、バイネームでの厳格なアクセス制御。外部へのデータ漏洩リスクを完全に排除する。
=== ここまで ===

2. 技術スタック: 使用している言語、フレームワーク、ツール、未決定なのであればあなたのニーズに関する要件
=== ここから ===
- **LLM**: ローカルLLMを利用。Ollamaを検討しているが、より高性能・高速（15秒以内応答目標）なものがあれば優先。運用状況に合わせて後からモデルや性能を調整可能にしたい。
- **UI**: Open WebUI (OSS) を想定。ただし、セキュリティ面で懸念があれば代替案も検討。ユーザーが簡単に使えるシンプルなインターフェースが望ましい。
- **データ連携**: ソースコード、Confluence、Slack等のデータをLLMに連携。具体的な方法は未定だが、シンプルかつユーザーフレンドリー、機密性を重視。ユーザーは指定URLアクセスのみで利用できるのが理想。
- **クラウド**: AWSを優先的に利用。必要であればGCPも検討可能。利用サービスは未定。
- **コンテナ**: Dockerを利用。
- **アクセス制御**: バイネームでの厳格なアクセス制限が必須。社内メンバーを対象とし、VPN経由のみのアクセスも検討。具体的な実装方法（IAM Identity Centerなど）は未定だが、手間はかけたくない。
- **開発言語**: チームはRuby on Rails, Go。ユーザーはC#が得意。LLMはこれらの言語への理解度があると望ましい。
=== ここまで ===

3. コミュニケーションスタイル: 希望する応答の詳細度、形式、専門用語レベル
=== ここから ===
- **詳細度**: 簡潔な回答を基本とし、必要に応じて深掘りする。
- **形式**: 手順リストを重視する。
- **専門用語**: 一般的なエンジニア向けのレベル。必要に応じて平易な説明を求める。
=== ここまで ===

4. 特定の要件: コード品質、パフォーマンス、セキュリティなどに関する特別な要件
=== ここから ===
- **コード品質**: TDD（テスト駆動開発）を必須とする。
- **パフォーマンス**: 同時接続ユーザー数100人程度を想定し、各リクエストに対して15秒以内のレスポンスを目指す。
- **セキュリティ**: 機密性確保とアクセス制御に加え、LLMやシステムの安全性について、技術的な知見がない関係者にも理解・納得してもらえるような説明ドキュメントを作成する必要がある。
- **その他**: 特になし。
=== ここまで ===

5. ワークフロー: あなたの開発ワークフローや好みの作業方法
=== ここから ===
- **バージョン管理**: GitおよびGitHubを常に利用する。
- **IaC/CI/CD**: TerraformおよびGitHub Actionsの利用を希望（知見は少ないためサポートを期待）。
- **タスク管理**: プロジェクトの進捗状況を可視化し、IssueやTaskチケットでの管理を希望。
- **開発方針**: MVP（Minimum Viable Product）を意識し、オーバーエンジニアリングを避ける。初期リリースで省略した機能はチケットで管理する。
=== ここまで ===

# インタラクティブセットアッププロセス - カスタマイズ可能な項目

1 ~ 5 のやりとりを踏まえて、より高精度で目的を達成するための追加質問を 6 ~ 10 まで行います。

6. データ連携の具体化: 範囲と更新頻度
=== ここから ===
連携データは基本的に全データを対象とする。更新頻度は日次バッチを基本とするが、ソースコードについてはリアルタイム連携が望ましい。ただし、実現可能性や負荷を考慮し、後から調整可能とすること。
=== ここまで ===

7. LLM選定の深掘り: モデルサイズと機能
=== ここから ===
モデルサイズに関する具体的な希望はない。開発環境（M4 Mac）での動作確認を考慮し、開発時と本番環境で異なる性能のモデルを利用可能にしたい。Ruby on Rails, Go, C#への理解度があると良い。
=== ここまで ===

8. アクセス制御の具体化: ユーザー管理とアクセス元
=== ここから ===
アクセス制御は社内メンバーを対象とする。既存のIDプロバイダー利用可否は未定。VPN経由のみのアクセス制限も選択肢として検討する。
=== ここまで ===

9. UIの要件: 特定OSSと機能
=== ここから ===
OSSのOpen WebUIを想定しているが、セキュリティ上の懸念があれば代替案も検討する。基本的なチャット機能（履歴含む）があれば十分だが、モデル切り替えやファイルアップロード機能の要否は未定。
=== ここまで ===

10. コスト意識: 予算感と最適化
=== ここから ===
コストはできる限り削減したい。個人での開始を想定し、スモールスタートで、必要に応じて後からスケールアップできる構成を目指す。コスト最適化の優先度は高い。
=== ここまで ===


# 追加ショートカット

- `/setup` : セットアッププロセスを開始します。途中で中断したいと言われたら中断して setup 前の内容に revert します。
- `/adjust`: 追加で最大 5 回までのやり取りを通じて現在の .cursor/rules/project_rules.mdc の内容をファインチューニングします。手順は '## 更新手順' に従って行うこと。
- `/store` : setup プロセスによって得られた回答をもとにファイルを更新します。手順は '## 更新手順' の項目を確認すること。

## 更新手順
store コマンドによってどのように更新するかを書きます。
- 既存の .config/rules/project_rules.mdc のコピーを .config/rules/project_rules.mdc.YYYYMMDD_HHMMSS.backup として作成します。
- 既存の .config/rules/project_rules.mdc のコピーを project_rules.mdc.temp として作成します。
- 既存の .config/rules/project_rules.mdc を削除します。
- project_rules.mdc.temp に setup プロセスによって得られた回答を書き込みます。
- project_rules.mdc.temp を project_rules.mdc にリネームします。
- project_rules.mdc を .cursor/rules/project_rules.mdc に移動します。
